pipeline {
    agent any
  environment {
        ec2_ip = "" // Define as a global variable
    }
    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/AbdallahHesham44/CloudDevOpsProject.git'
            }
        }

        stage('Terraform Init') {
            steps {
                dir('terraform') {
                    withCredentials([aws(credentialsId: 'aws-cred', region: 'us-west-1')]) {
                        script {
                            env.TF_VAR_AWS_ACCESS_KEY = env.AWS_ACCESS_KEY_ID
                            env.TF_VAR_AWS_SECRET_KEY = env.AWS_SECRET_ACCESS_KEY
                            sh 'terraform init'
                        }
                    }
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                dir('terraform') {
                    withCredentials([aws(credentialsId: 'aws-cred', region: 'us-west-1')]) {
                        sh 'terraform apply -auto-approve'
                    }
                }
            }
        }

        stage('Sleep for 3 Minutes') {
            steps {
                script {
                    echo 'Waiting for resources to initialize...'
                    sleep(time: 3, unit: 'MINUTES')
                }
            }
        }

      


        stage('Run Ansible') {
            steps {
                dir('../ansible') {
                    ansiblePlaybook credentialsId: 'ssh-key	', inventory: 'inventory', playbook: 'playbook.yml'
                }
            }
        }
    
}
    post {
        always {
            archiveArtifacts artifacts: 'inventory, terraform/terraform.tfstate', fingerprint: true
            cleanWs()
        }
    }
}
