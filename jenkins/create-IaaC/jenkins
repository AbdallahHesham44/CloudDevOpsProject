pipeline {
    agent any

 
    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/AbdallahHesham44/CloudDevOpsProject.git'
            }
        }

       stage('Terraform Init') {
            steps {
                dir('terraform'){
                withCredentials([aws(credentialsId: 'aws-cred', region: 'us-west-1')]) {
                    script {
                        env.TF_VAR_AWS_ACCESS_KEY = env.AWS_ACCESS_KEY_ID
                        env.TF_VAR_AWS_SECRET_KEY = env.AWS_SECRET_ACCESS_KEY
                        sh 'terraform init'
                    }
                }
            }
        }
}
        stage('Terraform Apply') {
            steps {
                dir('terraform'){
 withCredentials([aws(credentialsId: 'aws-cred', region: 'us-west-1')]) {
                sh 'terraform apply -auto-approve'
            }
}
            }
        }

        stage('Get EC2 IP') {
            steps {
             dir('terraform'){
                script {
                    def terraformOutput = sh(script: 'terraform output -json', returnStdout: true)
                    def publicIp = readJSON(text: terraformOutput).ec2_public_ip.value
                    writeFile file: 'inventory', text: "[web]\n${publicIp} ansible_user=ec2-user ansible_ssh_private_key_file=${env.ANSIBLE_PRIVATE_KEY}"
                }
            }
        }
        }

        stage('Run Ansible') {
            steps {
                 dir('ansible') {
                    ansiblePlaybook credentialsId: 'ssh-key', inventory: 'inventory', playbook: 'playbook.yml'
                }       
                     }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: 'inventory, terraform.tfstate', fingerprint: true
            cleanWs()
        }
    }
}
