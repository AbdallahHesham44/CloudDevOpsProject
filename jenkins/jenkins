pipeline {
    agent any

    tools {
        gradle 'Gradle' // Ensure this matches your Jenkins setup
    }

    environment {
        DOCKER_IMAGE = 'docker.io/abdallah1312/ivolve-app:latest'
        kubeconfigPath = '/home/abdallah/.kube/config'
        deploymentYaml = 'Kubernetes/deployment.yaml' // Define your Kubernetes deployment YAML path
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/AbdallahHesham44/CloudDevOpsProject.git'
            }
        }

        stage('Set Permissions') {
            steps {
                 dir('App') {
               // Ensure this is the correct directory
                    sh 'chmod +x ./gradlew'
                
            }}
        }

        stage('build') {
            steps {
dir('App') {
              
                    sh './gradlew build'
                
            }}
        }


        stage('SonarQube Analysis') {
            steps {
               dir('App') {
                    echo "Running SonarQube analysis"
                    sh './gradlew sonar --stacktrace'
                
            }
}
        }

        stage('Docker Login') {
            steps {
                dir('App'){
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-cred', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh 'docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD'
                    }
                }
}
            }
        }

        stage('Docker Build') {
        steps {
                        dir('App'){    
                echo "Building Docker image: $DOCKER_IMAGE"
                sh "docker build -t $DOCKER_IMAGE ."
            }
        }
}
        stage('Docker Push') {
            steps {
                echo "Pushing Docker image to Docker Hub"
                sh "docker push $DOCKER_IMAGE"
            }
        }
  stage('Set up Kubernetes (Kind)') {
            steps {
                script {
                    // Create a Kind cluster if it doesn't exist
                    sh 'kind create cluster --name $KIND_CLUSTER_NAME || true'
                    
                    // Export the kubeconfig for the Kind cluster
                    sh 'export KUBEVERSION=$(kind get kubeconfig-path --name=$KIND_CLUSTER_NAME)'
                    sh 'export KUBECONFIG=$KUBEVERSION'
                }
            }
        }

                    
                    
                   
        stage('Deploy') {
            steps {
                dir('Kubernetes'){ 
                echo "Deploying the application to Kubernetes"
                    sh 'ls'
                // sh "kubectl --kubeconfig=${kubeconfigPath} apply -f ${deploymentYaml}"
                    sh 'kubectl apply -f deployment.yaml --validate=false'
            }
        }
}
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo 'Build successful!'
        }
        failure {
            echo 'Build failed.'
        }
    }
}
