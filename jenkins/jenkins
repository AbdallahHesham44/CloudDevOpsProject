pipeline {
    agent any

    tools {
        gradle 'Gradle 8.12' // Ensure this matches your Jenkins setup
    }

    environment {
        DOCKER_IMAGE = 'docker.io/abdallah1312/docckerimage:latest'
        kubeconfigPath = '/home/ubuntu/config'
        deploymentYaml = 'Kubernetes/deployment.yaml' // Define your Kubernetes deployment YAML path
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/AbdallahHesham44/CloudDevOpsProject.git'
            }
        }

        stage('Set Permissions') {
            steps {
                dir('App') { // Use the correct directory name if applicable
                    sh 'chmod +x ./gradlew'
                }
            }
        }

        stage('Test') {
            steps {
                dir('App') { // Use the correct directory name if applicable
                    sh './gradlew test'
                }
            }
        }

        stage('Build') {
            steps {
                dir('App') { // Use the correct directory name if applicable
                    sh './gradlew clean build'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('App') { // Use the correct directory name if applicable
                    echo "Running SonarQube analysis"
                    sh './gradlew sonarqube'
                }
            }
        }

        stage('Docker Login') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-cred', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh 'docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD'
                    }
                }
            }
        }

        stage('Docker Build') {
            steps {
                echo "Building Docker image: $DOCKER_IMAGE"
                sh "docker build -t $DOCKER_IMAGE ."
            }
        }

        stage('Docker Push') {
            steps {
                echo "Pushing Docker image to Docker Hub"
                sh "docker push $DOCKER_IMAGE"
            }
        }
        
        stage('Deploy') {
            steps {
                echo "Deploying the application to Kubernetes"
                sh "kubectl --kubeconfig=${kubeconfigPath} apply -f ${deploymentYaml}"
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo 'Build successful!'
        }
        failure {
            echo 'Build failed.'
        }
    }
}
